package cc.brino.Brpp.Syntax;
/* The following code was generated by JFlex 1.4.1 on 12/02/17 18:51 */

/*
 * Generated on 2/12/17 6:51 PM
 */


import java.io.IOException;
import java.io.Reader;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


/**
 * 
 */

public class BrinoSyntax extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  @SuppressWarnings("unused")
private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\32\1\15"+
    "\1\20\1\1\1\36\1\34\1\7\2\33\1\23\1\35\1\31\1\27"+
    "\1\25\1\22\1\4\1\16\1\64\1\16\4\6\2\3\1\46\1\31"+
    "\1\103\1\102\1\104\1\32\1\20\1\61\1\73\1\50\1\66\1\75"+
    "\1\5\1\74\1\1\1\63\2\1\1\65\1\67\1\76\1\1\1\56"+
    "\1\1\1\77\1\71\1\101\1\72\1\100\4\1\1\33\1\11\1\33"+
    "\1\105\1\2\1\0\1\54\1\14\1\55\1\57\1\26\1\43\1\53"+
    "\1\37\1\44\2\1\1\45\1\70\1\52\1\51\1\41\1\60\1\13"+
    "\1\42\1\40\1\12\1\62\1\47\1\24\2\1\1\30\1\106\1\30"+
    "\1\32\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\2\7\1\1\1\10\1\7\1\11\3\7\26\1"+
    "\3\7\1\12\1\13\5\12\1\14\3\12\1\0\1\15"+
    "\1\0\2\15\1\1\1\3\1\16\1\0\1\3\2\1"+
    "\2\5\1\17\1\20\1\21\1\22\11\1\1\10\7\1"+
    "\1\10\32\1\1\23\11\0\1\22\1\0\1\24\1\1"+
    "\1\3\1\25\2\3\1\16\1\3\4\1\1\5\1\26"+
    "\1\5\21\1\1\27\16\1\1\30\17\1\11\0\1\1"+
    "\1\3\1\31\3\1\1\5\5\1\1\27\5\1\1\10"+
    "\37\1\2\0\1\32\2\0\1\33\1\0\1\3\3\1"+
    "\1\5\11\1\1\27\3\1\1\27\24\1\5\0\1\3"+
    "\3\1\1\5\2\1\1\27\27\1\1\31\2\1\1\27"+
    "\20\1\1\10\1\1\1\30\5\1\1\27\11\1\1\27"+
    "\65\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\325\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\325\0\325\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\325\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\325"+
    "\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0429\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\325\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\325\0\325\0\325\0\u124e\0\u1295\0\u12dc\0\u1323"+
    "\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u011c\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\325\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u0fcf\0\u218f\0\u21d6"+
    "\0\325\0\u221d\0\u2264\0\u10a4\0\u22ab\0\u22f2\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\325\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9"+
    "\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u011c\0\u2d7c\0\u2dc3\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u011c"+
    "\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3"+
    "\0\u36ea\0\u011c\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c"+
    "\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac"+
    "\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4"+
    "\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c"+
    "\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4202\0\u4e7d"+
    "\0\u42d7\0\u4ec4\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e"+
    "\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6"+
    "\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de"+
    "\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u497f\0\u5879\0\u58c0\0\u5907"+
    "\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f"+
    "\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf"+
    "\0\u5ff6\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f"+
    "\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9\0\u6610\0\u6657"+
    "\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f"+
    "\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7"+
    "\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u61e7\0\u6cb8"+
    "\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0"+
    "\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\6\1\11\1\12"+
    "\1\4\1\13\1\14\1\5\1\15\1\6\2\4\1\16"+
    "\1\17\1\20\1\5\1\21\1\22\1\23\1\24\1\4"+
    "\1\25\1\24\1\26\1\27\1\20\1\5\1\30\1\31"+
    "\1\32\1\33\1\5\1\34\1\25\1\5\1\35\1\36"+
    "\1\5\1\37\1\40\1\41\1\42\1\43\1\5\1\44"+
    "\1\5\1\45\1\6\1\46\1\47\1\50\1\5\1\51"+
    "\1\52\2\5\1\53\1\54\1\5\1\55\1\5\1\20"+
    "\1\56\1\57\1\25\1\60\10\61\1\62\12\61\1\63"+
    "\13\61\1\64\3\61\1\65\3\61\1\66\37\61\10\67"+
    "\1\70\26\67\1\71\3\67\1\72\3\67\1\73\37\67"+
    "\110\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\5\0"+
    "\3\75\2\6\1\75\1\6\2\0\4\75\1\0\1\6"+
    "\1\0\1\75\3\0\1\75\1\76\1\77\10\0\7\75"+
    "\1\0\15\75\1\6\15\75\5\0\3\75\2\6\1\75"+
    "\1\6\2\0\4\75\1\0\1\6\1\0\1\75\3\0"+
    "\1\100\1\76\1\77\10\0\7\75\1\0\15\75\1\6"+
    "\15\75\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\101\25\5\5\0\7\102\1\103\1\104\1\105\75\102"+
    "\1\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\3\5\1\106\3\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\107\10\0\7\5\1\0\33\5"+
    "\5\0\10\15\1\110\1\111\3\15\1\112\71\15\21\0"+
    "\1\16\107\0\1\113\1\114\56\0\1\25\106\0\1\25"+
    "\7\0\2\115\1\0\1\115\7\0\1\115\45\0\1\115"+
    "\23\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\116\1\0\1\5\10\0\3\5\1\117\3\5\1\0"+
    "\3\5\1\120\27\5\34\0\1\25\52\0\1\25\40\0"+
    "\1\25\107\0\1\25\44\0\1\25\5\0\6\5\2\0"+
    "\1\74\1\5\1\121\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\5\5\1\122\25\5"+
    "\6\0\6\5\2\0\1\74\1\123\1\124\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\125\2\5\1\126\25\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\127"+
    "\10\0\7\5\1\0\2\5\1\130\30\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\131\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\132\10\0\7\5\1\0\2\5\1\133"+
    "\30\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\134\10\0\5\5\1\135\1\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\136\30\5\6\0\6\5\2\0\1\74\1\137"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\1\5"+
    "\1\140\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\2\5\1\141\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\1\5\1\142\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\2\5\1\143\30\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\144\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\5\5\1\145\1\5"+
    "\1\0\5\5\1\146\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\147\10\0"+
    "\5\5\1\150\1\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\1\5\1\151\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\15\5\1\152\15\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\153\10\0\5\5\1\154\1\5\1\0\1\5"+
    "\1\155\31\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\156\10\0\5\5\1\157"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\1\160"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\161\10\0"+
    "\7\5\1\0\2\5\1\162\30\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\163"+
    "\10\0\7\5\1\0\5\5\1\164\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\22\5\1\165\10\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\3\5\1\166\3\5\1\0\3\5"+
    "\1\167\27\5\6\0\6\5\2\0\1\74\1\170\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\171\10\0\7\5\1\0"+
    "\33\5\110\0\1\20\107\0\1\20\110\0\1\25\10\61"+
    "\1\0\12\61\1\0\13\61\1\0\3\61\1\0\3\61"+
    "\1\0\37\61\22\0\1\172\124\0\1\173\106\0\1\174"+
    "\3\0\1\175\111\0\1\176\37\0\10\67\1\0\26\67"+
    "\1\0\3\67\1\0\3\67\1\0\37\67\40\0\1\177"+
    "\106\0\1\200\3\0\1\201\111\0\1\202\51\0\1\203"+
    "\74\0\7\75\2\0\4\75\1\0\1\75\1\0\1\75"+
    "\3\0\1\75\1\0\1\75\10\0\7\75\1\0\33\75"+
    "\5\0\3\75\2\204\1\75\1\204\2\0\4\75\1\0"+
    "\1\204\1\0\1\75\3\0\1\75\1\0\1\75\1\205"+
    "\5\0\1\205\1\0\7\75\1\0\15\75\1\204\15\75"+
    "\5\0\3\75\4\206\2\0\3\75\1\206\1\0\1\206"+
    "\1\0\1\75\3\0\1\75\1\0\1\206\10\0\4\75"+
    "\1\206\2\75\1\0\1\75\1\206\3\75\2\206\1\75"+
    "\1\206\1\75\1\206\2\75\1\206\1\75\1\206\4\75"+
    "\1\206\1\75\1\206\4\75\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\6\5\1\207\1\0\33\5\5\0\7\210\1\211\1\0"+
    "\76\210\7\0\1\211\77\0\4\210\1\212\1\210\1\213"+
    "\1\214\1\0\1\102\1\215\3\102\1\212\21\210\1\102"+
    "\2\210\1\102\6\210\1\102\11\210\1\212\22\210\1\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\5\5\1\216\25\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\3\5\1\217\3\5\1\0"+
    "\6\5\1\220\12\5\1\221\11\5\5\0\11\110\1\222"+
    "\3\110\1\223\75\110\1\15\1\110\2\15\1\0\1\15"+
    "\1\224\4\15\21\110\1\15\2\110\1\15\6\110\1\15"+
    "\11\110\1\15\22\110\3\75\2\115\1\75\1\115\2\0"+
    "\4\75\1\0\1\115\1\0\1\75\3\0\1\75\1\0"+
    "\1\77\10\0\7\75\1\0\15\75\1\115\15\75\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\5\5\1\225\1\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\2\5\1\226\4\5\1\0"+
    "\6\5\1\227\24\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\11\5\1\230\1\5\1\231\17\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\5\5\1\232\25\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\21\5\1\233\11\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\6\5\1\234\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\2\5\1\235"+
    "\30\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\3\5\1\236\3\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\1\5\1\237"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\3\5\1\240\27\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\6\5\1\241\1\0\5\5\1\242\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\243\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\6\5\1\244\24\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\245\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\246\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\4\5\1\247"+
    "\14\5\1\250\11\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\3\5\1\251\27\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\5\5\1\252\25\5\6\0\6\5\2\0"+
    "\1\74\1\5\1\253\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\254\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\3\5\1\255\27\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\5\5\1\256\1\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\3\5"+
    "\1\257\27\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\6\5\1\260"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\3\5\1\261"+
    "\1\262\2\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\3\5\1\263\3\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\11\5\1\264\21\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\1\5\1\265\31\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\5\1\266\5\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\4\5\1\267"+
    "\26\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\17\5"+
    "\1\265\13\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\3\5\1\270"+
    "\3\5\1\0\33\5\6\0\6\5\2\0\1\74\1\5"+
    "\1\271\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\4\5\1\272\26\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\10\5\1\273\22\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\21\5\1\274\11\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\10\5\1\275"+
    "\22\5\6\0\6\5\2\0\1\74\1\5\1\276\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\21\5\1\277\11\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\5\5\1\300\1\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\24\5\1\265\6\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\11\5\1\301\21\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\5\1\302\5\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\21\5\1\303"+
    "\11\5\6\0\6\5\2\0\1\74\1\5\1\304\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\45\0\1\305\107\0\1\306\112\0\1\307"+
    "\110\0\1\310\77\0\1\311\107\0\1\312\112\0\1\313"+
    "\110\0\1\314\42\0\4\315\5\0\1\315\1\0\1\315"+
    "\7\0\1\315\14\0\1\315\4\0\1\315\3\0\2\315"+
    "\1\0\1\315\1\0\1\315\2\0\1\315\1\0\1\315"+
    "\4\0\1\315\1\0\1\315\11\0\3\75\2\204\1\75"+
    "\1\204\2\0\4\75\1\0\1\204\1\0\1\75\3\0"+
    "\1\75\1\0\1\75\10\0\7\75\1\0\15\75\1\204"+
    "\15\75\10\0\2\204\1\0\1\204\7\0\1\204\45\0"+
    "\1\204\23\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\3\5\1\316\3\5"+
    "\1\0\33\5\5\0\7\210\1\103\1\0\102\210\1\213"+
    "\1\210\1\213\1\211\1\0\5\210\1\213\45\210\1\213"+
    "\26\210\1\102\1\210\1\102\1\211\1\0\5\210\1\102"+
    "\45\210\1\102\25\210\4\317\1\103\1\0\3\210\1\317"+
    "\1\210\1\317\7\210\1\317\14\210\1\317\4\210\1\317"+
    "\3\210\2\317\1\210\1\317\1\210\1\317\2\210\1\317"+
    "\1\210\1\317\4\210\1\317\1\210\1\317\11\210\1\0"+
    "\6\5\2\0\1\74\1\5\1\320\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\2\5\1\321\4\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\322\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\2\5\1\323"+
    "\30\5\5\0\10\110\1\0\101\110\4\324\2\110\1\222"+
    "\2\110\1\324\1\223\1\324\7\110\1\324\14\110\1\324"+
    "\4\110\1\324\3\110\2\324\1\110\1\324\1\110\1\324"+
    "\2\110\1\324\1\110\1\324\4\110\1\324\1\110\1\324"+
    "\11\110\1\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\3\5\1\325\3\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\326\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\1\5\1\327\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\1\330\2\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\5\5\1\331"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\3\5"+
    "\1\332\3\5\1\0\3\5\1\333\27\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\5\5\1\334\25\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\3\5\1\335\3\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\2\5\1\336\4\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\5\5\1\337\1\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\5\5\1\340\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\5\5\1\341\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\5\5\1\342\1\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\1\5\1\332\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\3\5\1\325\27\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\343\6\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\21\5\1\344\11\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\12\5\1\345"+
    "\20\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\346\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\2\5\1\343"+
    "\4\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\3\5"+
    "\1\347\1\350\2\5\1\0\10\5\1\351\22\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\13\5\1\343\17\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\5\5\1\242\1\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\352\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\353\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\3\5"+
    "\1\354\27\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\265\30\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\5\5\1\355\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\6\5\1\356\1\0\6\5\1\357\24\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\360\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\2\5\1\361\4\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\1\362\2\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\1\5\1\363\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\364\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\6\5\1\365"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\366\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\5\5\1\367\1\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\5\5\1\370\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\2\5\1\371\30\5\6\0\6\5\2\0\1\74"+
    "\1\372\2\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\13\5\1\257\17\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\30\5\1\373\2\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\10\5\1\363\22\5\6\0"+
    "\6\5\2\0\1\74\1\374\2\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\375\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\376\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\10\5\1\377\22\5"+
    "\46\0\1\u0100\113\0\1\u0101\66\0\1\306\105\0\1\u0102"+
    "\122\0\1\u0103\113\0\1\u0104\66\0\1\312\105\0\1\u0105"+
    "\64\0\4\u0106\5\0\1\u0106\1\0\1\u0106\7\0\1\u0106"+
    "\14\0\1\u0106\4\0\1\u0106\3\0\2\u0106\1\0\1\u0106"+
    "\1\0\1\u0106\2\0\1\u0106\1\0\1\u0106\4\0\1\u0106"+
    "\1\0\1\u0106\12\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\320\30\5\5\0\3\210\4\u0107\1\103\1\0"+
    "\3\210\1\u0107\1\210\1\u0107\7\210\1\u0107\14\210\1\u0107"+
    "\4\210\1\u0107\3\210\2\u0107\1\210\1\u0107\1\210\1\u0107"+
    "\2\210\1\u0107\1\210\1\u0107\4\210\1\u0107\1\210\1\u0107"+
    "\11\210\1\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\2\5"+
    "\1\u0108\30\5\6\0\6\5\2\0\1\74\2\5\1\u0109"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\13\5\1\u010a\17\5\5\0\3\110\4\u010b\2\110\1\222"+
    "\2\110\1\u010b\1\223\1\u010b\7\110\1\u010b\14\110\1\u010b"+
    "\4\110\1\u010b\3\110\2\u010b\1\110\1\u010b\1\110\1\u010b"+
    "\2\110\1\u010b\1\110\1\u010b\4\110\1\u010b\1\110\1\u010b"+
    "\11\110\1\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\1\5\1\u010c\5\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\1\5\1\343"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u010d\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\5\5\1\u010e\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\5\5\1\u010f\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\3\5\1\u0110\3\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\3\5\1\u0111\27\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\2\5\1\u0112\30\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\2\5\1\u0113\30\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\6\5\1\u0114"+
    "\24\5\6\0\6\5\2\0\1\74\1\5\1\u0115\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\137\30\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\6\5\1\u0116\24\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\5\5\1\242\25\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\5\5\1\u0117\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\3\5\1\u0118\27\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u0119\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\1\5\1\u011a\5\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\5\5\1\u011b\1\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\5\5\1\u011c"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\1\5"+
    "\1\u011d\1\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\6\5\1\u011e\24\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\6\5\1\u011f\24\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\13\5\1\266\17\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\5\5\1\u0120\1\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\2\5\1\u0121"+
    "\2\5\1\u0122\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\3\5\1\u0123\27\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\2\5\1\u0124\30\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\5\5\1\u0125\1\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\5\5\1\320\25\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\3\5\1\u0126\4\5"+
    "\1\316\22\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\5\5\1\154"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\5\5"+
    "\1\u0127\1\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\1\5\1\u0128\5\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\3\5\1\u0126\27\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\u0129\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\6\5\1\316\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u012a\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u012b\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\5\5\1\300\25\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\u012c\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\5\5\1\u012d\25\5"+
    "\47\0\1\306\3\0\1\u0101\62\0\1\u012e\65\0\1\u0102"+
    "\1\u012f\4\u0102\1\u012f\2\0\3\u0102\1\0\1\u0102\1\0"+
    "\1\u012f\1\0\1\u0102\1\u012f\1\u0102\1\u012f\1\u0102\1\u012f"+
    "\1\0\6\u012f\7\u0102\1\u012f\33\u0102\1\u012f\46\0\1\312"+
    "\3\0\1\u0104\62\0\1\u0130\65\0\1\u0105\1\u0131\4\u0105"+
    "\1\u0131\2\0\3\u0105\1\0\1\u0105\1\0\1\u0131\1\0"+
    "\1\u0105\1\u0131\1\u0105\1\u0131\1\u0105\1\u0131\1\0\6\u0131"+
    "\7\u0105\1\u0131\33\u0105\1\u0131\7\0\4\u0132\5\0\1\u0132"+
    "\1\0\1\u0132\7\0\1\u0132\14\0\1\u0132\4\0\1\u0132"+
    "\3\0\2\u0132\1\0\1\u0132\1\0\1\u0132\2\0\1\u0132"+
    "\1\0\1\u0132\4\0\1\u0132\1\0\1\u0132\11\0\3\210"+
    "\4\u0133\1\103\1\0\3\210\1\u0133\1\210\1\u0133\7\210"+
    "\1\u0133\14\210\1\u0133\4\210\1\u0133\3\210\2\u0133\1\210"+
    "\1\u0133\1\210\1\u0133\2\210\1\u0133\1\210\1\u0133\4\210"+
    "\1\u0133\1\210\1\u0133\11\210\1\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\3\5\1\u0134\27\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\5\5\1\u0135\1\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u0136\10\0\7\5\1\0\33\5\5\0\3\110\4\u0137"+
    "\2\110\1\222\2\110\1\u0137\1\223\1\u0137\7\110\1\u0137"+
    "\14\110\1\u0137\4\110\1\u0137\3\110\2\u0137\1\110\1\u0137"+
    "\1\110\1\u0137\2\110\1\u0137\1\110\1\u0137\4\110\1\u0137"+
    "\1\110\1\u0137\11\110\1\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\332\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\13\5\1\u0138\17\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\3\5\1\u0139\27\5\6\0\6\5\2\0\1\74"+
    "\1\5\1\u013a\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\21\5\1\u013b\11\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\1\u013c\6\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\26\5\1\u013d\4\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u013e\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\5\5\1\u013c"+
    "\25\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\22\5"+
    "\1\u013f\7\5\1\u0140\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\5\5"+
    "\1\u0141\1\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\1\5\1\343\5\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\5\5\1\u0142\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\14\5\1\u0143\16\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\5\5\1\u0144\25\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\4\5\1\u0145"+
    "\26\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\6\5"+
    "\1\u0146\24\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\7\5\1\u0147\23\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\1\5"+
    "\1\u0148\5\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\5\5\1\u0149\1\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\4\5\1\247\26\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\3\5\1\u014a\27\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u014b\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\5\5\1\u014c\1\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\3\5"+
    "\1\u014d\27\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\13\5\1\u014e\17\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\10\5\1\316\22\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\1\5\1\316\5\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\5\5\1\u014f\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\u0150\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\5\1\u0151\5\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\1\5\1\u0126\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\2\5"+
    "\1\u0152\30\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\10\5\1\u0153\22\5\27\0\1\u0102\106\0\1\u0105\67\0"+
    "\4\5\5\0\1\5\1\0\1\5\7\0\1\5\14\0"+
    "\1\5\4\0\1\5\3\0\2\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\1\0\1\5\4\0\1\5\1\0"+
    "\1\5\11\0\3\210\4\102\1\103\1\0\3\210\1\102"+
    "\1\210\1\102\7\210\1\102\14\210\1\102\4\210\1\102"+
    "\3\210\2\102\1\210\1\102\1\210\1\102\2\210\1\102"+
    "\1\210\1\102\4\210\1\102\1\210\1\102\11\210\1\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\10\5\1\u0154\22\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\10\5\1\u013c"+
    "\22\5\6\0\6\5\2\0\1\74\1\5\1\u0155\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\5\0\3\110\4\15\2\110\1\222\2\110"+
    "\1\15\1\223\1\15\7\110\1\15\14\110\1\15\4\110"+
    "\1\15\3\110\2\15\1\110\1\15\1\110\1\15\2\110"+
    "\1\15\1\110\1\15\4\110\1\15\1\110\1\15\11\110"+
    "\1\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\u0156\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\5\1\341\5\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\6\5\1\u0157\1\0\24\5"+
    "\1\u0158\6\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\5\5\1\u0159"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\2\5\1\332\30\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\21\5\1\320\11\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\6\5\1\u015a\24\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\2\5\1\343\30\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u015b\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\1\5\1\u015c\5\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\6\5\1\u015d\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\3\5"+
    "\1\u015e\27\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\3\5\1\u015f\27\5\6\0\6\5\2\0\1\74\1\u0160"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\5\5\1\316\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\5\5\1\u0161\25\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\5\5\1\u0162\25\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\2\5\1\u0163\4\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u0164\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\u0165\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u0166\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\5\5\1\u0167\1\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\2\5"+
    "\1\u0168\30\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\6\5\1\320"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\5\5\1\265\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\2\5\1\u0169\30\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\16\5\1\u016a\1\u016b\13\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u016c\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\u016d"+
    "\10\0\7\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\1\5\1\u016e\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\3\5\1\332\27\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\u016f\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\1\5\1\253\5\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\5\5\1\u0170\1\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\u0171\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\5\5\1\u0172\25\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\2\5\1\u0173\30\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\1\5\1\u0174\5\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\1\5\1\u0175\5\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\u0176\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\3\5\1\u0177\3\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\1\5\1\u0178\1\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\u0179\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\6\5\1\u017a\24\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u017b\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\20\5\1\u017c\12\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\13\5\1\u017d\17\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\25\5\1\u017e\5\5\6\0\6\5\2\0"+
    "\1\74\1\5\1\u017f\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\2\5\1\u0180\30\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\u0181\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\u0182\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\137\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\12\5\1\u0183"+
    "\5\5\1\u0184\12\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\3\5\1\u0185\27\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\2\5\1\u0186\30\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\3\5\1\333\27\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\332\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\10\5\1\u013c"+
    "\22\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\4\5"+
    "\1\u0187\26\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\u0188\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\320\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\5\5\1\u0189"+
    "\25\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\1\5\1\u018a\5\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\14\5\1\u018b\16\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\6\5"+
    "\1\137\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\1\5"+
    "\1\u018c\5\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\4\5\1\343\26\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\2\5\1\u0135\30\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\u018d\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\1\5\1\u018e\1\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\3\5\1\316\27\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\3\5\1\u018f\27\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\6\5\1\u0190"+
    "\24\5\6\0\6\5\2\0\1\74\1\5\1\316\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\3\5\1\u0191\27\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\5\5"+
    "\1\u0192\1\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\5\5\1\u0193\25\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\3\5\1\343\27\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\u0194\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u0195\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\6\5\1\240"+
    "\24\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\5\5"+
    "\1\332\25\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\3\5\1\u0196\27\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\5\5\1\u0197\25\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\6\5\1\332\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\3\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\5\5\1\u0198\25\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\7\5\1\0\4\5\1\316\26\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\5\5\1\u0199\1\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\4\5\1\u019a\1\u0142"+
    "\25\5\6\0\6\5\2\0\1\74\3\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\6\5"+
    "\1\u019b\24\5\6\0\6\5\2\0\1\74\1\5\1\u019c"+
    "\1\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\6\5\1\u013c\24\5\6\0\6\5\2\0\1\74"+
    "\1\5\1\u019d\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\1\5\1\u019e\5\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\1\5\1\u019f\1\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\3\5\1\0\1\5\5\0\1\5"+
    "\1\0\1\5\10\0\7\5\1\0\13\5\1\106\17\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\21\5\1\u0128"+
    "\11\5\6\0\6\5\2\0\1\74\1\u01a0\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\1\5\1\u01a1\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\5\5\1\u013c"+
    "\1\5\1\0\33\5\6\0\6\5\2\0\1\74\1\u01a2"+
    "\2\5\1\0\1\5\5\0\1\5\1\0\1\5\10\0"+
    "\7\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u01a3\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\6\5\1\u013c"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\2\5\1\u01a4\30\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\2\5"+
    "\1\u01a5\4\5\1\0\33\5\6\0\6\5\2\0\1\74"+
    "\1\5\1\u01a6\1\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\7\5\1\0\33\5\6\0\6\5\2\0"+
    "\1\74\3\5\1\0\1\5\5\0\1\5\1\0\1\5"+
    "\10\0\3\5\1\332\3\5\1\0\33\5\6\0\6\5"+
    "\2\0\1\74\3\5\1\0\1\5\5\0\1\5\1\0"+
    "\1\5\10\0\1\5\1\u01a7\5\5\1\0\33\5\6\0"+
    "\6\5\2\0\1\74\1\5\1\u01a8\1\5\1\0\1\5"+
    "\5\0\1\5\1\0\1\5\10\0\7\5\1\0\33\5"+
    "\6\0\6\5\2\0\1\74\3\5\1\0\1\5\5\0"+
    "\1\5\1\0\1\5\10\0\7\5\1\0\2\5\1\u01a9"+
    "\30\5\6\0\6\5\2\0\1\74\1\u01aa\2\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\7\5\1\0"+
    "\33\5\6\0\6\5\2\0\1\74\1\5\1\u01ab\1\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\2\5\1\u01ac"+
    "\4\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\u01a4\10\0\7\5"+
    "\1\0\33\5\6\0\6\5\2\0\1\74\3\5\1\0"+
    "\1\5\5\0\1\5\1\0\1\5\10\0\1\5\1\u01ad"+
    "\5\5\1\0\33\5\6\0\6\5\2\0\1\74\3\5"+
    "\1\0\1\5\5\0\1\5\1\0\1\5\10\0\7\5"+
    "\1\0\2\5\1\242\30\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28826];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\11\1\2\11\34\1\1\11"+
    "\5\1\1\11\3\1\1\0\1\1\1\0\4\1\1\11"+
    "\1\0\5\1\3\11\55\1\1\11\11\0\1\1\1\0"+
    "\3\1\1\11\11\1\1\11\61\1\11\0\62\1\2\0"+
    "\1\1\2\0\1\1\1\0\47\1\5\0\173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  @SuppressWarnings("unused")
private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  @SuppressWarnings("unused")
private int yyline;

  /** the number of characters up to the start of the matched text */
  @SuppressWarnings("unused")
private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  @SuppressWarnings("unused")
private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public BrinoSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BrinoSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BrinoSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 29: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 30: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 31: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 32: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 33: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 34: break;
        case 8: 
          { addToken(Token.RESERVED_WORD);
          }
        case 35: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 36: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 37: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 38: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 23: 
          { addToken(Token.FUNCTION);
          }
        case 40: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 41: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 42: break;
        case 25: 
          { addToken(Token.DATA_TYPE);
          }
        case 43: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 44: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 45: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 46: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 47: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 48: break;
        case 24: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 49: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 10: 
          { 
          }
        case 53: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 430: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 431: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 432: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
